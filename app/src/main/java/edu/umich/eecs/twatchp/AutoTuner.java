package edu.umich.eecs.twatchp;

import android.os.Environment;
import android.util.Log;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by Arun on 11/22/2014.
 */
public class AutoTuner {
    MainActivity mainActivity;
    CountdownBuffer buffer;
    Recorder recorder;
    Player player;

    private final static String TAG = "AutoTuner";
    double [] chirp = {1,0.9596,0.84139,0.65457,0.41401,0.13912,-0.14768,-0.4228,-0.6634,-0.84932,-0.96477,-0.99971,-0.95078,-0.82167,-0.62287,-0.37088,-0.086886,0.20502,0.47985,0.71386,0.88664,0.9829,0.99386,0.91814,0.76192,0.5385,0.26723,-0.028128,-0.32149,-0.5867,-0.79993,-0.94179,-0.99913,-0.96637,-0.846,-0.64853,-0.39158,-0.09837,0.20436,0.48875,0.72843,0.90093,0.98987,0.98651,0.89071,0.71103,0.46398,0.17263,-0.13559,-0.43139,-0.68643,-0.87606,-0.9817,-0.99275,-0.90767,-0.73426,-0.48899,-0.19551,0.11763,0.41968,0.68076,0.8748,0.98219,0.99179,0.90218,0.72187,0.46859,0.16757,-0.1509,-0.45453,-0.71226,-0.89752,-0.99093,-0.98244,-0.87245,-0.67187,-0.40113,-0.088141,0.23455,0.53312,0.77602,0.93733,0.99958,0.9557,0.80985,0.57718,0.28223,-0.043529,-0.36509,-0.64759,-0.86019,-0.97938,-0.99171,-0.89534,-0.70037,-0.42786,-0.10759,0.22509,0.5332,0.78224,0.94403,1,0.94337,0.78002,0.528,0.21557,-0.12191,-0.44593,-0.71926,-0.9102,-0.99635,-0.96726,-0.82579,-0.58793,-0.28104,0.059225,0.39302,0.68097,0.88883,0.99159,0.97657,0.84504,0.61224,0.30564,-0.03817,-0.37786,-0.6723,-0.88554,-0.99126,-0.97609,-0.84137,-0.60312,-0.29024,0.058935,0.40129,0.69427,0.90114,0.99569,0.96558,0.81406,0.55972,0.23427,-0.12133,-0.46199,-0.74422,-0.93168,-0.99993,-0.93969,-0.75819,-0.47839,-0.13616,0.22424,0.55588,0.81528,0.96809,0.99379,0.88844,0.66544,0.35389,-0.0051611,-0.364,-0.67464,-0.89521,-0.99568,-0.96201,-0.79818,-0.5259,-0.18174,0.18766,0.53189,0.80365,0.96527,0.99403,0.88541,0.65391,0.33121,-0.038073,-0.40252,-0.71104,-0.92005,-0.99969,-0.9382,-0.74373,-0.44336,-0.079449,0.29628,0.63006,0.87381,0.99208,0.96729,0.80248,0.52099,0.16333,-0.21861,-0.56907,-0.8365,-0.98126,-0.98151,-0.83666,-0.5676,-0.21385,0.17222,0.53304,0.81447,0.97393,0.98693,0.85095,0.58598,0.23176,-0.15818,-0.52447,-0.811,-0.97352,-0.98656,-0.84755,-0.57738,-0.21742,0.17677,0.5439,0.82657,0.98019,0.98016,0.82591,0.54119,0.17053,-0.22762,-0.59007,-0.85893,-0.99089,-0.9643,-0.78283,-0.47512,-0.090362,0.30948,0.65961,0.9029,0.99929,0.93248,0.71282,0.37581,-0.023477,-0.41937,-0.74633,-0.94988,-0.99569,-0.87556,-0.60895,-0.24,0.1697,0.55131,0.84031,0.98747,0.96729,0.78262,0.46433,0.066319,-0.34351,-0.69484,-0.92697,-0.99942,-0.89908,-0.64273,-0.27437,0.14223,0.53446,0.83357,0.98674,0.96648,0.77576,0.44768,0.039897,-0.37544,-0.7244,-0.94447,-0.99582,-0.86863,-0.58516,-0.19592,0.22915,0.61321,0.88642,0.99868,0.92898,0.6894,0.32324,-0.10268,-0.51018,-0.824,-0.98579,-0.96502,-0.76491,-0.42212,-0.00015346,0.42231,0.76604,0.96615,0.98442,0.81679,0.49435,0.077758,-0.35408,-0.7189,-0.94676,-0.99356,-0.8497,-0.54221,-0.12982,0.3081,0.68682,0.93259,0.99714,0.86726,0.5677,0.15657,-0.28575,-0.6723,-0.92663,-0.99801,-0.87168,-0.57206,-0.15824,0.28759,0.67639,0.93004,0.99712,0.86352,0.55553,0.13487,-0.31358,-0.6988,-0.94215,-0.99351,-0.84174,-0.51727,-0.08621,0.36305,0.73788,0.96051,0.9843,0.80367,0.45555,0.012026,-0.43447,-0.79039,-0.98069,-0.96478,-0.74534,-0.36812,0.087482,0.52498,0.85122,0.99627,0.92856,0.66189,0.25288,-0.21095,-0.62977,-0.91297,-0.99878,-0.86796,-0.54827,-0.10878,0.35491,0.7414,0.96567,0.97791,0.77476,0.40038,-0.06295,-0.51279,-0.84915,-0.99681,-0.92221,-0.64134,-0.2165,0.25738,0.67382,0.93873,0.99179,0.82032,0.46252,-0.00079961,-0.4644,-0.82241,-0.99257,-0.93529,-0.66302,-0.2378,0.24271,0.66756,0.93814,0.99114,0.81355,0.44609,-0.025964,-0.4924,-0.84375,-0.99706,-0.91561,-0.6179,-0.17373,0.31206,0.72419,0.96432,0.97466,0.75204,0.34908,-0.13805,-0.59244,-0.9045,-0.99843,-0.85086,-0.49684,-0.021765,0.45905,0.82834,0.9955,0.91897,0.61682,0.16269,-0.33196,-0.74511,-0.97429,-0.96213,-0.71095,-0.28256,0.21671,0.66228,0.94242,0.98634,0.78232,0.38102,-0.11684,-0.5856,-0.90639,-0.99731,-0.83455,-0.45887,0.034376,0.51928,0.87145,1,0.87119,0.51751,0.029727,-0.4662,-0.8416,-0.9985,-0.8954,-0.55847,-0.075165,0.42828,0.81972,0.99586,0.90965,0.5831,0.10195,-0.40666,-0.8077,-0.99411,-0.91557,-0.59231,-0.11019,0.40192,0.80647,0.99422,0.91391,0.58648,0.099929,-0.41417,-0.81613,-0.99613,-0.90444,-0.56537,-0.071105,0.44311,0.83592,0.99876,0.88604,0.52817,0.023623,-0.48792,-0.8642,-0.99997,-0.85668,-0.47362,0.042512,0.54715,0.89831,0.99659,0.81355,0.4002,-0.12694,-0.61849,-0.93451,-0.98444,-0.7533,-0.30646,0.22861,0.69849,0.96783,0.95844,0.67229,0.1914,-0.34537,-0.78231,-0.99205,-0.91285,-0.56704,-0.055081,0.47346,0.86344,0.99979,0.84164,0.43489,-0.10081,-0.6071,-0.93361,-0.98275,-0.73915,-0.27474,0.27221,0.73807,0.98284,0.93232,0.60096,0.087997,-0.45199,-0.85556,-0.9999,-0.84048,-0.42502,0.12042,0.62951,0.94632,0.97319,0.7011,0.21301,-0.34115,-0.79039,-0.99544,-0.8921,-0.51165,0.028273,0.55982,0.91704,0.98774,0.74905,0.27507,-0.28578,-0.75707,-0.98987,-0.90997,-0.54188,-0.0016073,0.53961,0.9095,0.98966,0.75376,0.27646,-0.28983,-0.76352,-0.99196,-0.90094,-0.51901,0.031051,0.57149,0.92692,0.98131,0.71621,0.21727,-0.35305,-0.80827,-0.99881,-0.86144,-0.44052,0.12593,0.65124,0.96158,0.95358,0.62911,0.095235,-0.47077,-0.88017,-0.99577,-0.77815,-0.29944,0.28022,0.76604,0.99407,0.88667,0.47934,-0.090683,-0.63037,-0.95621,-0.95673,-0.63095,-0.089364,0.48322,0.8906,0.99248,0.75308,0.25404,-0.33306,-0.80546,-0.99932,-0.8467,-0.3998,0.18658,0.70836,0.98319,0.91434,0.52509,-0.048725,-0.60584,-0.95006,-0.95945,-0.6299,-0.077194,0.50328,0.90551,0.98601,0.71533,0.18922,-0.40492,-0.85454,-0.99807,-0.78323,-0.28646,0.3139,0.80141,0.99954,0.83585,0.36886,-0.23249,-0.74968,-0.99398,-0.87556,-0.43686,0.16218,0.70216,0.98449,0.90466,0.49123,-0.1039,-0.66103,-0.97367,-0.92523,-0.53286,0.058161,0.62793,0.96358,0.93902,0.56261,-0.025221,-0.60399,-0.95578,-0.94739,-0.58117,0.0051772,0.58998,0.9513,0.95126,0.58904,0.0019465,-0.58631,-0.95069,-0.95106,-0.58644,0.0038527,0.59308,0.95404,0.94679,0.5733,-0.022573,-0.6101,-0.96092,-0.93793,-0.54925,0.054193,0.63686,0.97046,0.92355,0.51369,-0.098628,-0.67249,-0.98126,-0.90223,-0.46583,0.15564,0.71571,0.9914,0.87219,0.40478,-0.22476,-0.76474,-0.99845,-0.83133,-0.3297,0.30509,0.81722,0.99946,0.77732,0.23995,-0.3952,-0.8701,-0.991,-0.70781,-0.1353,0.49295,0.91965,0.96926,0.62056,0.016193,-0.59525,-0.96135,-0.93018,-0.51379,0.11599,0.69801,0.99003,0.86976,0.38648,-0.25864,-0.79594,-0.99996,-0.78432,-0.23877,0.40768,0.88263,0.98513,0.671,0.07241,-0.55729,-0.95062,-0.93969,-0.52829,0.10886,0.6999,0.99171,0.85854,0.35666,-0.29891,-0.82619,-0.99749,-0.73806,-0.1592,0.48901,0.92548,0.96012,0.577,-0.057822,-0.66782,-0.98632,-0.8733,-0.37738,0.28453,0.82177,0.99753,0.73355,0.14546,-0.50734,-0.93586,-0.94955,-0.54147,0.10774,0.70937,0.9949,0.8361,0.30309,-0.36608,-0.87139,-0.98542,-0.65602,-0.030744,0.60881,0.97357,0.89786,0.41507,-0.25646,-0.81181,-0.9979,-0.72911,-0.12723,0.5332,0.94988,0.93122,0.48489,-0.18473,-0.76968,-1,-0.76858,-0.18152,0.48999,0.93463,0.94537,0.51635,-0.15349,-0.75213,-0.99976,-0.77981,-0.19437,0.48262,0.93328,0.94509,0.51161,-0.16354,-0.76182,-1,-0.76447,-0.16605,0.51164,0.94628,0.93026,0.47033,-0.21464,-0.79731,-0.99826,-0.72029,-0.096023,0.57483,0.96908,0.89593,0.38978,-0.30529,-0.85284,-0.98686,-0.64142,0.016355,0.66655,0.99188,0.83273,0.26602,-0.43139,-0.91753,-0.95314,-0.51979,0.16992,0.77621,0.99934,0.72819,0.096103,-0.58403,-0.97442,-0.88029,-0.34758,0.35884,0.88642,0.97091,0.56913,-0.11835,-0.74679,-1,-0.74972,-0.1212,0.56889,0.9717,0.88269,0.34605,-0.36662,-0.89329,-0.96546,-0.54546,0.15325,0.77402,0.99893,0.71194,0.059354,-0.62411,-0.98676,-0.84109,-0.2613,0.45385,0.93457,0.93134,0.4449,-0.27294,-0.84921,-0.98344,-0.60479,0.089959,0.73805,1,0.7377,0.0879,-0.60849,-0.98491,-0.84231,-0.25499,0.46744,0.94287,0.91886,0.4072,-0.32112,-0.87899,-0.96885,-0.54188,0.17479,0.79837,0.99468,0.65764,-0.032746,-0.70591,-0.99937,-0.75419,-0.10175,0.60606,0.98623,0.83211,0.22635,-0.50274,-0.95869,-0.89261,-0.33957,0.39925,0.92012,0.93738,0.44065,-0.2983,-0.87365,-0.96839,-0.52941,0.20198,0.82216,0.98774,0.60616,-0.1119,-0.76819,-0.99758,-0.67154,0.029145,0.71393,0.99996,0.72639,0.045546,-0.66123,-0.99682,-0.77174,-0.11177,0.6116,0.98992,0.80862,0.16935,-0.56627,-0.98082,-0.83809,-0.2183,0.52622,0.97088,0.86112,0.25872,-0.49217,-0.96122,-0.87858,-0.29079,0.4647,0.95275,0.89123,0.3147,-0.4442,-0.94618,-0.89963,-0.33062,0.43093,0.942,0.90422,0.33867,-0.42508,-0.94051,-0.90521,-0.33893,0.4267,0.94181,0.90268,0.3314,-0.43578,-0.94582,-0.89648,-0.316,0.45221,0.95225,0.8863,0.29263,-0.47578,-0.96061,-0.87164,-0.26111,0.50616,0.97022,0.85186,0.22125,-0.54289,-0.98018,-0.82616,-0.17287,0.58533,0.98937,0.7936,0.11586,-0.63265,-0.99646,-0.75318,-0.050209,0.68378,0.9999,0.70384,-0.023929,-0.73737,-0.99795,-0.64454,0.10616,0.79175,0.98867,0.57433,-0.19579,-0.84493,-0.97001,-0.49243,0.29174,0.89457,0.93984,0.39833,-0.39244,-0.93799,-0.89605,-0.29194,0.49584,0.97218,0.83665,0.17365,-0.59927,-0.99389,-0.75994,-0.044529,0.69946,0.99972,0.66465,-0.093579,-0.79255,-0.98626,-0.55016,0.23794,0.87409,0.9503,0.41671,-0.38485,-0.93925,-0.88904,-0.2656,0.52959,0.9829,0.80045,0.099383,-0.66647,-0.99993,-0.68351,0.077919,0.78894,0.98561,0.53863,-0.26077,-0.88982,-0.93596,-0.36794,0.44207,0.96169,0.84829,0.17559,-0.61332,-0.99732,-0.7217,0.032052,0.7649,0.99029,0.5576,-0.24633,-0.88653,-0.93575,-0.36018,0.45644,0.96796,0.83114,0.13672,-0.64983,-0.99983,-0.67698,0.10224,0.81284,0.97472,0.47755,-0.34315,-0.93165,-0.88824,-0.24141,0.5699,0.99354,0.74012,-0.018503,-0.76483,-0.98835,-0.53518,0.28509,0.91006};

    private int attemptNumber = 0;
    private final static int MAXATTEMPTS = 15;
    private int adjustAmount = 250;
    boolean finetune = false;
    String message = "";
    int numFound = -1;

    static { System.loadLibrary("MyLib"); }

    public AutoTuner(MainActivity context, CountdownBuffer buffer, Recorder recorder, Player player) {
        this.mainActivity = context;
        this.buffer = buffer;
        this.recorder = recorder;
        this.player = player;
    }

    Runnable tuneRoutine = new Runnable () {
        @Override
        public void run() {
            try {
                Thread.sleep(250);
                buffer.getAll();
            } catch (Exception e) {}

            if (finetune) mainActivity.addInfo("" + attemptNumber + " ~ fine tuning", 50);
            else if (numFound != -1) mainActivity.addInfo("Attempt " + attemptNumber + " (" + numFound + ")", 50);
            else mainActivity.addInfo("Attempt " + attemptNumber, 50);


            buffer.storeData(0.5);
            Log.v(TAG, "Buffer storing. Buffer has " + buffer.howMany() + " and buffer wants " + buffer.doYouWant());

            while (buffer.doYouWant()) {
                try {
                    Thread.currentThread().sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            //Log.v(TAG, "" + attemptNumber + " - Converting");
            ArrayList<Byte> tmpBuffer = buffer.getAll();
            Object[] channels = AudioFuncs.pcmToDouble(tmpBuffer);

            double [] signal = (double[])channels[0];

            //Log.v(TAG, "" + attemptNumber + " - JNI Call " + tmpBuffer.size());
            int [] peaks = new int[200];
            double [] xcorrOutput = new double [signal.length];
            numFound = findchirps(signal, chirp, xcorrOutput, peaks, signal.length, chirp.length, xcorrOutput.length, peaks.length);
            Log.v(TAG, "Result - " + message + " (" + numFound + ")");


            int IDEAL = (int)(44100.0/(player.CHIRP.length + player.SPACE));
            boolean rerun = false;

            //if (!finetune) { // Once in finetune, we stay there.
            if (numFound > (IDEAL - 2) && numFound < (IDEAL + 2)) {
                finetune = true;
            } else if (numFound > (IDEAL/2 - 2) && numFound < (IDEAL/2 + 2)) {
                Log.v(TAG, "Overlapped");
                adjustAmount = (player.CHIRP.length + player.SPACE)/4;
                rerun = true;
            }
            else {
                adjustAmount = 300;
                rerun = true;
            }
            //}

            if (finetune) {
                double [] leftmic = (double[])channels[1];
                int [] leftPeaks = new int[200];
                double [] leftXcorr = new double [leftmic.length];
                findchirps(leftmic, chirp, leftXcorr, leftPeaks, leftmic.length, chirp.length, leftXcorr.length, leftPeaks.length);

                ArrayList<Integer> watch_to_phone = new ArrayList<Integer>();
                ArrayList<Integer> phone_to_watch = new ArrayList<Integer>();

                for (int i = 1; i < numFound; i++) {
                    int delta = peaks[i] - peaks[i-1];
                    if (delta < 0) continue;
                    if (Math.abs(leftXcorr[peaks[i-1]]) < Math.abs(leftXcorr[peaks[i]])) watch_to_phone.add(delta);
                    else phone_to_watch.add(delta);
                }

                Log.v(TAG, "Watch to phone: " + watch_to_phone.toString());
                Log.v(TAG, "Phone to watch: " + phone_to_watch.toString());

                double w_2_p = get_average(watch_to_phone);
                double p_2_w = get_average(phone_to_watch);

                if (Math.abs(w_2_p - p_2_w) > 50) {
                    adjustAmount = (int)((p_2_w - w_2_p)/2);
                    Log.v(TAG, "Adjust amount: " + adjustAmount);
                    rerun = true;
                }
            }

            if (rerun) {
                player.tweak(adjustAmount);
                if (!finetune) attemptNumber++;
                if (attemptNumber > MAXATTEMPTS) {
                    //mainActivity.addInfo("Autotuned failed after " + (attemptNumber - 1) + " attempts.", 250);
                    mainActivity.doneAutotune(false);
                } else {
                    try {
                        Thread.currentThread().sleep(250);
                        tuneRoutine.run();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            } else {
                mainActivity.doneAutotune(true);
            }

            //mainActivity.addInfo("Result - " + message + " (" + numFound + ")", 50);
            //filename = file.getAbsolutePath() + "/autotuned." + System.currentTimeMillis() + Recorder.AUDIO_RECORDER_FILE_EXT_WAV;
            //AudioFile.SaveFromBuffer(tmpBuffer, filename, recorder.bufferSize);



        }
    };

    double get_average (ArrayList<Integer> arr) {
        double sum = 0;
        for (int i = 0; i < arr.size(); i++) {
            sum += arr.get(i);
        }

        return sum / arr.size();
    }

    public void start () {
        attemptNumber = 1;
        finetune = false;
        message = "";
        numFound = -1;

        new Timer().schedule(new TimerTask() {
            @Override
            public void run() {
                Log.e(TAG, "Starting auto tuner");
                new Thread(tuneRoutine).start();
            }
        }, 1000);
    }


    public native int findchirps (double [] signal, double [] chirp, double [] xcorr, int [] windows, int signallen, int chirplen, int corrlen, int windowlen);
}







